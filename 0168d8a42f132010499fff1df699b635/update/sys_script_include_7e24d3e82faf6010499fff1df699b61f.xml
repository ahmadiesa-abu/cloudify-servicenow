<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_607849_cloudify.cloudify_http</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>cloudify_http</name>
        <script><![CDATA[var cloudify_http = Class.create();
cloudify_http.prototype = {
    initialize: function(rest_message, http_method, content) {
		var conf = new cloudify_config();
		// ** Create REST Request **
		// Might throw exception if message doesn't exist or not visible due to scope.
		this.sm = new sn_ws.RESTMessageV2(rest_message, http_method);
		// Set Request variables
		//this.sm.setHttpTimeout(10000); // Wait at most 10 seconds for response from http request.
		var host = (conf.use_ssl ? 'https://':'http://') + conf.host;
		this.sm.setStringParameter("host", host);
		this.sm.setStringParameter("tenant", conf.tenant);
		this.sm.setBasicAuth('<username>', '<password>');
		if (content !== null) {
			this.sm.setRequestBody(content);
		}
    },
	/*
    * @param {String} key   - SN HTTP REST Parameter Key
    * @param {String} value - SN HTTP REST Parameter Value
    */
    setParam: function(key, value) {
      this.sm.setStringParameter(key, value);
    },

    /*
    * @return {Object} obj - Object of parsed response
    */
    execute: function() {
			var requestBody;
			var requestStatus;
			var responseBody;
			var parsed = null;

			try {
				// Might throw exception if http connection timed out or auth error
				var response = this.sm.execute();

				responseBody = response.haveError() ? response.getErrorMessage() : response.getBody();
				requestStatus    = response.getStatusCode();
			} catch(ex) {
				// On HTTP Request error
				responseBody  = ex.getMessage();
				requestBody   = this.sm ? this.sm.getRequestBody() : null;
				requestStatus = response ? response.getStatusCode() : "500";

				// Log to System Logs
				gs.info("Error making HTTP Request");
				gs.info("HTTP Status: "  + requestStatus);
				gs.info("Request Body: " + requestBody);
				gs.info("Response: "     + responseBody);
			} finally {
				if (requestStatus > 202) {
					gs.info("HTTP Request Body: " + requestBody);
					gs.info("HTTP Request Status: " + requestStatus);
					gs.info("HTTP Request Error: "  + responseBody);
				} else {
					// parse JSON string returned from request into a JSON object
					parsed = JSON.parse(responseBody);
				}
			}

			return parsed;
    },

    type: 'cloudify_http'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-04-13 07:55:23</sys_created_on>
        <sys_id>7e24d3e82faf6010499fff1df699b61f</sys_id>
        <sys_mod_count>0</sys_mod_count>
        <sys_name>cloudify_http</sys_name>
        <sys_package display_value="Cloudify" source="x_607849_cloudify">0168d8a42f132010499fff1df699b635</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloudify">0168d8a42f132010499fff1df699b635</sys_scope>
        <sys_update_name>sys_script_include_7e24d3e82faf6010499fff1df699b61f</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-04-13 07:55:23</sys_updated_on>
    </sys_script_include>
</record_update>
