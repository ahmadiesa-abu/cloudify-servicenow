<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_607849_cloudify.cloudify_integration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>cloudify_integration</name>
        <script><![CDATA[var cloudify_integration = Class.create();
cloudify_integration.prototype = {
    initialize: function() {
    },
	
	/* Blueprints Integration */
	uploadBlueprint: function(blueprint_id, application_file_name, visibility, blueprint_archive_url, labels){
		var http = new cloudify_http("Cloudify Blueprints", "Upload Blueprint", null);
		http.setParam("blueprint_id", blueprint_id);
		http.setQueryParam("application_file_name", application_file_name);
		http.setQueryParam("visibility", visibility);
		http.setQueryParam("blueprint_archive_url", blueprint_archive_url);
		http.setQueryParam("labels", labels);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	deleteBlueprint: function(blueprint_id, force){
		var http = new cloudify_http("Cloudify Blueprints", "Delete Blueprint", null);
		http.setParam("blueprint_id", blueprint_id);
		http.setQueryParam("force", force);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	listBlueprints: function() {
		var http = new cloudify_http("Cloudify Blueprints", "List Blueprints", null);
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse.items;
	},
	
	/* Deployments Integration */
	createDeployment: function(blueprint_id, deployment_id, inputs, site_name, labels, private_resource, skip_plugins_validation, visibility){
		var content = {
			"blueprint_id": String(blueprint_id),
			"private_resource": Boolean(private_resource),
			"skip_plugins_validation": Boolean(skip_plugins_validation),
			"visibility": String(visibility),
			"inputs": inputs,
			"labels": labels
		};
		if (String(site_name)!=''){
			content["site_name"] = String(site_name);
		}
		gs.info("content after : "+JSON.stringify(content));
		var http = new cloudify_http("Cloudify Deployments", "Create Deployment", JSON.stringify(content));
		http.setParam("deployment_id", deployment_id);
		var parsedResponse = http.execute();
		return parsedResponse;
		
	},
	getDeploymentCapabilities: function(deployment_id){
		var http = new cloudify_http("Cloudify Deployments", "Get Deployment Capabilities", null);
		http.setParam("deployment_id", deployment_id);
		var parsedResponse = http.execute();
		return parsedResponse.capabilities;
	},
	getDeploymentOutputs: function(deployment_id){
		var http = new cloudify_http("Cloudify Deployments", "Get Deployment Outputs", null);
		http.setParam("deployment_id", deployment_id);
		var parsedResponse = http.execute();
		return parsedResponse.outputs;
	},
	deleteDeployment: function(deployment_id, force){
		var http = new cloudify_http("Cloudify Deployments", "Delete Deployment", null);
		http.setParam("deployment_id", deployment_id);
		http.setQueryParam("force", force);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	listDeployments: function(){
		var http = new cloudify_http("Cloudify Deployments", "List Deployments", null);
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse.items;
	},
	
	/* Events Integration */
	listEvents: function(filter_type, filter_value){
		var http = new cloudify_http("Cloudify Events", "List Events", null);
		http.setQueryParam(filter_type, filter_value);
		var parsedResponse = http.execute();
		return parsedResponse.items;
	},
	
	/* Executions Integration */
	startExecution: function(deployment_id, workflow_id, allow_custom_parameters, parameters, force, queue, schedule){
		var content = {
			"deployment_id": String(deployment_id),
			"workflow_id": String(workflow_id),
			"allow_custom_parameters": Boolean(allow_custom_parameters),
			"parameters": parameters,
			"force": Boolean(force),
			"queue": Boolean(queue),
		};
		if (String(schedule)!=''){
			content["schedule"] = String(schedule);
		}
		
		var http = new cloudify_http("Cloudify Exeuctions", "Start Execution", JSON.stringify(content));
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	cancelExecution: function(excution_id, deployment_id, action){
		var content = {
			"deployment_id": String(deployment_id),
			"action": String(action)
		};
		var http = new cloudify_http("Cloudify Exeuctions", "Cancel Execution", JSON.stringify(content));
		http.setParam("excution_id", excution_id);
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	getExecution: function(execution_id){
		var http = new cloudify_http("Cloudify Exeuctions", "Get Execution", null);
		http.setParam("excution_id", excution_id);
		http.setQueryParam("_include","[id, status, error]");
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	
	/* Secrets Integration */
	createSecret: function(secret_key, secret_value, update_if_exists, visibility, is_hidden_value){
		var content = {
			"value": String(secret_value),
			"update_if_exists": Boolean(update_if_exists),
			"visibility": String(visibility),
			"is_hidden_value": Boolean(is_hidden_value)
		};
		var http = new cloudify_http("Cloudify Secrets", "Create Secret", JSON.stringify(content));
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	updateSecret: function(secret_key, secret_value, visibility, is_hidden_value){
		var content = {
			"value": String(secret_value),
			"visibility": String(visibility),
			"is_hidden_value": Boolean(is_hidden_value)
		};
		var http = new cloudify_http("Cloudify Secrets", "Update Secret", JSON.stringify(content));
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	deleteSecret: function(secret_key){
		var http = new cloudify_http("Cloudify Secrets", "Delete Secret", null);
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	getSecret: function(secret_key){
		var http = new cloudify_http("Cloudify Secrets", "Get Secret", null);
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},

    type: 'cloudify_integration'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-04-15 12:58:02</sys_created_on>
        <sys_id>5e2e6e5d2fe32010499fff1df699b660</sys_id>
        <sys_mod_count>23</sys_mod_count>
        <sys_name>cloudify_integration</sys_name>
        <sys_package display_value="Cloudify" source="x_607849_cloudify">0168d8a42f132010499fff1df699b635</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloudify">0168d8a42f132010499fff1df699b635</sys_scope>
        <sys_update_name>sys_script_include_5e2e6e5d2fe32010499fff1df699b660</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-04-22 07:34:17</sys_updated_on>
    </sys_script_include>
</record_update>
