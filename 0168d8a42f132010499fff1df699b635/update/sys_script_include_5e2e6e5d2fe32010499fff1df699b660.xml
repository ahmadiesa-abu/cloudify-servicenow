<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_607849_cloudify.cloudify_integration</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>cloudify_integration</name>
        <script><![CDATA[var cloudify_integration = Class.create();
cloudify_integration.prototype = {
    initialize: function() {
    },
	
	/* Blueprints Integration */
	uploadBlueprint: function(config_name, blueprint_id, application_file_name, visibility, blueprint_archive_url, blueprint_archive, labels){
		var http = null;
		if (blueprint_archive!='' && blueprint_archive!='No attachment found')
			http = new cloudify_http(config_name, "Cloudify Blueprints", "Upload Blueprint", blueprint_archive);
		else{
			http = new cloudify_http(config_name, "Cloudify Blueprints", "Upload Blueprint", null);
			http.setQueryParam("blueprint_archive_url", blueprint_archive_url);
		}
		http.setParam("blueprint_id", blueprint_id);
		http.setQueryParam("application_file_name", application_file_name);
		http.setQueryParam("visibility", visibility);
		if(labels)
			http.setQueryParam("labels", labels);
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	deleteBlueprint: function(config_name, blueprint_id, force){
		var http = new cloudify_http(config_name, "Cloudify Blueprints", "Delete Blueprint", null);
		http.setParam("blueprint_id", blueprint_id);
		http.setQueryParam("force", force);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	listBlueprints: function(config_name) {
		var PAGINATION_SIZE = 1000;
		var offset = 0;
		var result = [];
		var done = false;
		while (!done){
			var http = new cloudify_http(config_name, "Cloudify Blueprints", "List Blueprints", null);
			http.setQueryParam("_include","id");
			http.setQueryParam("_size",PAGINATION_SIZE);
			http.setQueryParam("_offset",offset);
			var parsedResponse = http.execute();
			if(parsedResponse.items.length<PAGINATION_SIZE)
				done = true;
			result = result.concat(parsedResponse.items);	
			offset += PAGINATION_SIZE;
		}
		return result;
	},
	getBlueprintInputs: function(config_name, blueprint_id){
		var http = new cloudify_http(config_name, "Cloudify Blueprints", "Get Blueprint", null);
		http.setQueryParam("id", blueprint_id);
		http.setQueryParam("_include","plan");
		var parsedResponse = http.execute();
		var bp_inputs = parsedResponse.items[0].plan.inputs;
		Object.keys(bp_inputs).forEach(function(key) {			
			if (bp_inputs[key]["default"] !== undefined && bp_inputs[key]["type"] === undefined){
				if (Array.isArray(bp_inputs[key]["default"]))
					bp_inputs[key]["type"] = 'list';
				else if (typeof bp_inputs[key]["default"] === 'number')
					bp_inputs[key]["type"] = 'float';
				else if (typeof bp_inputs[key]["default"] === 'object')
					bp_inputs[key]["type"] = 'dict';
				else if (typeof bp_inputs[key]["default"] === 'boolean')
					bp_inputs[key]["type"] = 'boolean';
				else
					bp_inputs[key]["type"] = 'string';
			}
		});
		return bp_inputs;
	},
	
	/* Deployments Integration */
	createDeployment: function(config_name, blueprint_id, deployment_id, inputs, site_name, labels, private_resource, skip_plugins_validation, visibility, display_name){
		var content = {
			"blueprint_id": String(blueprint_id),
			"private_resource": Boolean(private_resource),
			"skip_plugins_validation": Boolean(skip_plugins_validation),
			"visibility": String(visibility),
			"inputs": inputs,
			"labels": labels
		};
		if (String(site_name)!=''){
			content["site_name"] = String(site_name);
		}
		if (String(display_name)!=''){
			content["display_name"] = String(display_name);
		}
		
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Create Deployment", JSON.stringify(content));
		http.setParam("deployment_id", deployment_id);
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse;
		
	},
	getDeploymentCapabilities: function(config_name, deployment_id){
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Get Deployment Capabilities", null);
		http.setParam("deployment_id", deployment_id);
		var parsedResponse = http.execute();
		return parsedResponse.capabilities;
	},
	getDeploymentOutputs: function(config_name, deployment_id){
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Get Deployment Outputs", null);
		http.setParam("deployment_id", deployment_id);
		var parsedResponse = http.execute();
		return parsedResponse.outputs;
	},
	deleteDeployment: function(config_name, deployment_id, force){
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Delete Deployment", null);
		http.setParam("deployment_id", deployment_id);
		http.setQueryParam("force", force);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	listDeployments: function(config_name){
		var PAGINATION_SIZE = 1000;
		var offset = 0;
		var result = [];
		var done = false;
		var http = new cloudify_http(config_name, "Cloudify Manager", "Get Version", null);
		http.setQueryParam("_include", "version");
		var parsedResponse = http.execute();
		while (!done){
			http = new cloudify_http(config_name, "Cloudify Deployments", "List Deployments", null);
			if (parseFloat(parsedResponse.version)>=6)
				http.setQueryParam("_include",['id', 'labels', 'display_name']);
			else
				http.setQueryParam("_include",['id', 'labels']);
			http.setQueryParam("_size",PAGINATION_SIZE);
			http.setQueryParam("_offset",offset);
			parsedResponse = http.execute();
			if(parsedResponse.items.length<PAGINATION_SIZE)
				done = true;
			result = result.concat(parsedResponse.items);	
			offset += PAGINATION_SIZE;
		}
		return result;
	},
	getDeploymentWorkflows: function(config_name, deployment_id){
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Get Deployment", null);
		http.setQueryParam("id", deployment_id);
		http.setQueryParam("_include","workflows");
		var parsedResponse = http.execute();
		var dp_workflows = parsedResponse.items[0].workflows;
		return dp_workflows;
	},
	getDeploymentInputs: function(config_name, deployment_id){
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Get Deployment", null);
		http.setQueryParam("id", deployment_id);
		http.setQueryParam("_include","inputs");
		var parsedResponse = http.execute();
		var dp_inputs = parsedResponse.items[0].inputs;
		return dp_inputs;
	},
	
	updateDeployment: function(config_name, blueprint_id, deployment_id, inputs){
		var content = {
			"blueprint_id": String(blueprint_id),
			"skip_install": false,
			"skip_uninstall": false,
			"skip_reinstall": false,
			"force": false,
			"ignore_failure": false,
			"install_first": false,
			"inputs": inputs,
			"reinstall_list": [],
			"preview": false,
			
		};
		
		var http = new cloudify_http(config_name, "Cloudify Deployments", "Update Deployment", JSON.stringify(content));
		http.setParam("deployment_id", deployment_id);
		var parsedResponse = http.execute();
		return parsedResponse;
		
	},
	
	/* Events Integration */
	listEvents: function(config_name, filter_type, filter_value){
		var http = new cloudify_http(config_name, "Cloudify Events", "List Events", null);
		http.setQueryParam(filter_type, filter_value);
		var parsedResponse = http.execute();
		return parsedResponse.items;
	},
	
	/* Executions Integration */
	startExecution: function(config_name, deployment_id, workflow_id, allow_custom_parameters, parameters, force, queue, schedule){
		var content = {
			"deployment_id": String(deployment_id),
			"workflow_id": String(workflow_id),
			"allow_custom_parameters": Boolean(allow_custom_parameters),
			"parameters": parameters,
			"force": Boolean(force),
			"queue": Boolean(queue),
		};
		if (String(schedule)!=''){
			content["scheduled_time"] = String(schedule);
		}		
		var http = new cloudify_http(config_name, "Cloudify Executions", "Start Execution", JSON.stringify(content));
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	cancelExecution: function(config_name, excution_id, deployment_id, action){
		var content = {
			"deployment_id": String(deployment_id),
			"action": String(action)
		};
		var http = new cloudify_http(config_name, "Cloudify Executions", "Cancel Execution", JSON.stringify(content));
		http.setParam("execution_id", execution_id);
		http.setQueryParam("_include","id");
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	getExecution: function(config_name, execution_id){
		var http = new cloudify_http(config_name, "Cloudify Executions", "Get Execution", null);
		http.setParam("execution_id", execution_id);
		http.setQueryParam("_include",['id', 'status', 'error']);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	getExecutionsBulk: function(config_name, executions_ids){
		
		var conf = new cloudify_config(config_name);
		var sm = new sn_ws.RESTMessageV2();
		var host = (conf.use_ssl ? 'https://':'http://') + conf.host;
		sm.setHttpMethod("get");
		sm.setBasicAuth(conf.username, conf.password);
		if(conf.mid_server !== null && conf.mid_server !=''){
			sm.setMIDServer(conf.mid_server);
		}
		sm.setRequestHeader('tenant', conf.tenant);
		var endpoint = host+'/api/v3.1/executions?_include=id,status,error';
		for (var i = 0; i < executions_ids.length; i++){
			endpoint+="&id="+executions_ids[i];
		}
		sm.setEndpoint(endpoint);
		sm.setHttpTimeout(60000);
		var responseStatusCode;
		var responseBody;
		var parsed = null;

		try {
			sm.setHttpTimeout(60000); // wait for 60 seconds
			var response = sm.execute();
			responseBody = response.getBody();
			responseStatusCode    = response.getStatusCode();
		} catch(ex) {
			responseBody  = ex.getMessage();
			responseStatusCode = response ? response.getStatusCode() : "500";
		} finally {
			if (responseStatusCode>202)
				parsed = {
					'responseStatusCode': responseStatusCode,
					'responseBody' : responseBody!=null ? JSON.parse(responseBody):''
				};
			else
				parsed = JSON.parse(responseBody);
		}
		return parsed;
	},
	listExecutions: function(config_name, deployment_id){
		var http = new cloudify_http(config_name, "Cloudify Executions", "List Executions", null);
		http.setQueryParam("deployment_id", deployment_id);
		http.setQueryParam("_include",['id', 'status', 'workflow_id']);
		var parsedResponse = http.execute();
		return parsedResponse.items;
	},
	/* Secrets Integration */
	createSecret: function(config_name, secret_key, secret_value, update_if_exists, visibility, is_hidden_value){
		var content = {
			"value": String(secret_value),
			"update_if_exists": Boolean(update_if_exists),
			"visibility": String(visibility),
			"is_hidden_value": Boolean(is_hidden_value)
		};
		var http = new cloudify_http(config_name, "Cloudify Secrets", "Create Secret", JSON.stringify(content));
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	updateSecret: function(config_name, secret_key, secret_value, visibility, is_hidden_value){
		var content = {
			"value": String(secret_value),
			"visibility": String(visibility),
			"is_hidden_value": Boolean(is_hidden_value)
		};
		var http = new cloudify_http(config_name, "Cloudify Secrets", "Update Secret", JSON.stringify(content));
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	deleteSecret: function(config_name, secret_key){
		var http = new cloudify_http(config_name, "Cloudify Secrets", "Delete Secret", null);
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	getSecret: function(config_name, secret_key){
		var http = new cloudify_http(config_name, "Cloudify Secrets", "Get Secret", null);
		http.setParam("secret_key", secret_key);
		var parsedResponse = http.execute();
		return parsedResponse;
	},
	/* Manager Integration */
	getManagerVersion: function(config_name){
		var http = new cloudify_http(config_name, "Cloudify Manager", "Get Version", null);
		http.setQueryParam("_include", "version");
		var parsedResponse = http.execute();
		return parsedResponse.version;
	},

    type: 'cloudify_integration'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-04-15 12:58:02</sys_created_on>
        <sys_id>5e2e6e5d2fe32010499fff1df699b660</sys_id>
        <sys_mod_count>128</sys_mod_count>
        <sys_name>cloudify_integration</sys_name>
        <sys_package display_value="Cloudify" source="x_607849_cloudify">0168d8a42f132010499fff1df699b635</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloudify">0168d8a42f132010499fff1df699b635</sys_scope>
        <sys_update_name>sys_script_include_5e2e6e5d2fe32010499fff1df699b660</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-17 09:36:42</sys_updated_on>
    </sys_script_include>
</record_update>
