<?xml version="1.0" encoding="UTF-8"?><record_update table="sys_script_include">
    <sys_script_include action="INSERT_OR_UPDATE">
        <access>package_private</access>
        <active>true</active>
        <api_name>x_607849_cloudify.cloudify_utils</api_name>
        <caller_access/>
        <client_callable>false</client_callable>
        <description/>
        <name>cloudify_utils</name>
        <script><![CDATA[var cloudify_utils = Class.create();
cloudify_utils.prototype = {
    initialize: function() {
    },

    /*
    * @param {Array} outputs - Outputs to be formatted. They are expected to be an
    * array of objects, with each object having a name and value field.
    * @return {String} formatted object as an HTML code block to be used within Journal fields
    */
    formatCommentOutputs: function(outputs) {
      outputs.sort(function(a, b) {
        return a.name - b.name;
      });

      var buffer = '';
      buffer = buffer + '[code]';

      buffer = buffer +
        '<style type="text/css">' +
        '.cfy-output-sensitive { filter: blur(4px); } ' +
        '.cfy-output-sensitive:hover { filter: none; } ' +
        '</style>';

      outputs.forEach(function(output) {
        if (output.sensitive) {
          buffer = buffer +
            '<h4>' +
            '<code>' + output.name + '</code>' +
            '&nbsp;<small>sensitive</small>' +
            '</h4>' +
            '<div class="cfy-output-sensitive">';
        } else {
          buffer = buffer +
            '<h4><code>' + output.name + '</code></h4>' +
            '<div>';
        }

        buffer = buffer +
          '<pre><code>' +
          JSON.stringify(output.value, null, 2).replace(/\n/g, '<br/>') +
          '</code></pre>' +
          '</div>';
      });

      buffer = buffer + '[/code]';

      return buffer;
    },
	
	
	/*
	* @param {String} title - Title for the quote block
    * @param {String} jsonValues - Json object to loop through key/values and format them on quote
    * @return {String} formatted string as an HTML quote block to be used within Journal fields
    */
    formatJsonBlockQuote: function(title, jsonValues) {
      var buffer = '[code]<h2> ' + title + '</h2></br>';
		Object.keys(jsonValues).forEach(function(key) {
          buffer = buffer +
            '<h4><code>' + key + '</code></h4>' +
            '<div>';

        buffer = buffer +
          '<pre><code>' +
			jsonValues[key].replace(/\n/g, '<br/>') +
          '</code></pre>' +
          '</div>';
      });

      buffer = buffer + '[/code]';

      return buffer;
    },

    /*
    https://community.servicenow.com/community?id=community_blog&sys_id=4d9ceae1dbd0dbc01dcaf3231f9619e1
    * @param {Object} obj - Object to be formatted as a JSON code block
    * @return {String} formatted object as an HTML code block to be used within Journal fields
    */
    formatCommentCodeBlock: function(obj) {
      var jsonObj = JSON.stringify(obj, null, 2);
      return "[code]<pre><code>" + jsonObj.replace(/\n/g, "<br/>") + "</code></pre>[/code]";
    },

    /*
    * @param {String} quote - String to be in a quote block
    * @return {String} formatted string as an HTML quote block to be used within Journal fields
    */
    formatCommentBlockQuote: function(quote) {
      return "[code]<blockquote>" + quote + "</blockquote>[/code]";
    },

    /*
    * @param {String} url  - URL for the hyperlink
    * @param {String} text - Optional text to display the url within the hyperlink
    * @return {String} formatted url as an HTML hyperlink to be used within Journal fields
    */
    formatCommentHyperlink: function(url, text) {
      return "[code]<a href=\"" + url + "\">" + (text === null ? url : text) + "</a>[/code]";
    },
	
	/*
	Post a comment to a requested item from the Cloudify Catalog based on the Requested Item
	* @param {String} sys_id - sys_id of the Requested Item
	* @param {String} content - Content to post as a comment on the request item
	*/
	postRITMComment: function(sys_id, content) {
		// Query request items for the request
		var reqItem = new GlideRecord("sc_req_item");
		reqItem.addQuery("sys_id", sys_id);
		reqItem.query();

		while (reqItem.next()) {
			reqItem.comments = content;
			reqItem.update();
		}
	},
	
	updateRITMState: function(sys_id, state) {
		// Query request items for the request
		var reqItem = new GlideRecord("sc_req_item");
		reqItem.addQuery("sys_id", sys_id);
		reqItem.query();

		while (reqItem.next()) {
			reqItem.state = state;
			reqItem.update();
		}
	},
	
	updateReqState: function(sys_id, state) {
		var req = new GlideRecord("sc_request");
		req.addQuery("sys_id", sys_id);
		req.query();

		while (req.next()) {
			req.state = state;
			req.request_state = state;
			req.update();
		}
	},

    type: 'cloudify_utils'
};]]></script>
        <sys_class_name>sys_script_include</sys_class_name>
        <sys_created_by>admin</sys_created_by>
        <sys_created_on>2021-04-13 08:21:42</sys_created_on>
        <sys_id>be2cdfa02fef6010499fff1df699b677</sys_id>
        <sys_mod_count>30</sys_mod_count>
        <sys_name>cloudify_utils</sys_name>
        <sys_package display_value="Cloudify" source="x_607849_cloudify">0168d8a42f132010499fff1df699b635</sys_package>
        <sys_policy>read</sys_policy>
        <sys_scope display_value="Cloudify">0168d8a42f132010499fff1df699b635</sys_scope>
        <sys_update_name>sys_script_include_be2cdfa02fef6010499fff1df699b677</sys_update_name>
        <sys_updated_by>admin</sys_updated_by>
        <sys_updated_on>2021-08-03 09:20:54</sys_updated_on>
    </sys_script_include>
</record_update>
